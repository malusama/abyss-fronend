{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Dragger","Upload","Meta","Card","Title","Typography","Paragraph","Text","App","useState","files","setFiles","current","setCurrent","cardList","setCardList","page","name","action","listType","onChange","info","console","log","file","status","result","CardList","_","chain","map","item","span","key","hoverable","style","width","cover","src","title","description","score","value","size","message","error","getResultList","response","fileList","className","InboxOutlined","href","code","level","target","flex","onClick","e","selectedKeys","mode","Item","icon","MailOutlined","Boolean","window","location","hostname","match","ReactGA","initialize","pageview","pathname","search","Index","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25ef4155.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { Upload, message, Card, Row, Col, Typography, Menu, Image } from 'antd';\nimport { InboxOutlined, MailOutlined } from '@ant-design/icons';\nimport LazyLoad from 'react-lazy-load';\n\nimport _ from 'lodash';\nimport './App.css';\n\nconst { Dragger } = Upload;\nconst { Meta } = Card;\nconst { Title, Paragraph, Text } = Typography;\n\n\nconst App = () => {\n  const [files, setFiles] = useState([])\n  // const [result, setResult] = useState({})\n  const [current, setCurrent] = useState('index')\n  const [cardList, setCardList] = useState([])\n\n  const getResultList = (result) => {\n    const CardList =  _.chain(result)\n      .map(item => {\n        return (\n          <Col span={6} key={item.name}>\n            <Card\n              hoverable\n              style={{ width: 240 }}\n              cover={\n                <Image\n                  width={240}\n                  src={`https://abyss-malu.oss-accelerate.aliyuncs.com/${item.name}.jpg?x-oss-process=style/abyss`} />}\n            >\n              <Meta\n                title={`${item.name}`}\n                description={`Score: ${item.score} %`}\n              />\n            </Card>\n          </Col>\n        )\n      })\n      .value();\n    if (_.size(CardList) === 0) {\n      message.error('咕咕鸟并不认识~')\n    }\n    return CardList\n  }\n\n  const handleChange = (info) => {\n    console.log(info);\n    if (info.file.status === 'done') {\n      setCardList(getResultList(info.file.response))\n      setFiles([])\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    } else if (info.file.status === 'uploading') {\n      console.log(info);\n      setFiles(info.fileList)\n    }\n  };\n  const handleClick = (e) => {\n    setCurrent(e.key)\n  }\n\n  const figure = () => {\n    const character = ['蔷薇', 'SakuraSaber', '新条茜', '002', '木之本櫻', '新垣绫濑', '阿比盖尔·威廉姆斯', '芙蘭朵露', '两仪式',\n      '御坂美琴', '悠莉', '惠惠', '鹿目圓', '英梨梨', '島風號', '竈門禰豆子', '輝夜月', '加藤恵', '凉风青叶', 'Dva', '远坂凛',\n      '春野櫻', '矢泽妮可', '薇尔莉特·伊芙加登', '星野宫子', '枝垂萤', '可可萝', '樱岛麻衣', '長門有希', '雷姆', '春日野穹',\n      '藤原千花', '絆愛', '黛冬優子', '伊莉雅', 'がんばれ同期ちゃん2', '霧雨魔理沙', '雷古', '明日香', '莱莎琳·斯托特', '天津風',\n      '艾莉絲·蓋恩斯巴勒', '葛飾北齋', '和泉紗霧', '蝴蝶忍', '可畏', '战场原黑仪', '秋山澪', '长野原美绪', '栗山未来', '五更瑠璃',\n      '黎明卿', '阿米娅', '姬坂乃爱', '高坂桐乃', '涼宮春日', '月野兔', '白咲花', '逢坂大河', '乌贼娘', '東風谷早苗', '本間芽衣子',\n      '娜娜奇', '初音未來', '血小板', '天天座理世', '香風智乃', '泉此方', '伊蕾娜', '田村麻奈实', '七七', '莫娜', 'saber',\n      '蕾米莉亚·斯卡蕾特', '湊阿庫婭', '莉可', '惠飞须泽胡桃', '中野梓', '三笠', '鳳翔', '派蒙', '山田妖精', '圣路易斯', '优子',\n      '润羽露西娅', '艾米莉亚碳', '千反田愛瑠', '绫波丽', '四宫辉夜', '南小鸟', '酷霸王姬', '宝多六花', '溶解莉莉丝', '椎名真白',\n      'GawrGura', '琪露诺', '小路綾', 'Vikala', '博麗靈夢', '八九寺真宵']\n    return character.map(item => {\n      return (\n        <Col flex={1}>\n          <LazyLoad\n            width={240}\n          >\n            <Image\n              width={240}\n              src={`https://abyss-malu.oss-accelerate.aliyuncs.com/${item}.jpg?x-oss-process=style/abyss`}\n            />\n          </LazyLoad>\n        </Col>\n\n      )\n    })\n  }\n\n  const page = {\n    'index': (\n      <div>\n        <Dragger\n          name='file'\n          // action='https://1745622356255182.cn-beijing.fc.aliyuncs.com/2016-08-15/proxy/abyss/app/score'\n          action='https://abyss.malu.moe/api/score'\n          // action='/api/score'\n          // action='http://localhost:8000/api/score'\n          listType='text'\n          onChange={handleChange}\n          fileList={files}\n        >\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-text\">上传图片识别</p>\n          <p className=\"ant-upload-hint\">\n            当前只支持部分人物.欢迎提交识别需求~\n          </p>\n        </Dragger>\n        <Row>\n          {cardList}\n        </Row>\n        <Row className=\"footer\">\n          <Typography>\n            <Paragraph>\n              <Text>欢迎同学们进群 326141027 交流 <a href=\"mailto:chensichengmalu@email.com\">Email</a></Text>\n            </Paragraph>\n            {/*<Popover content={content} title=\"扫码进群\" trigger=\"hover\">*/}\n            {/*  <Paragraph copyable={{ text: '326141027' }}>QQ群: 326141027</Paragraph>*/}\n            {/*</Popover>*/}\n\n          </Typography>\n        </Row>\n      </div>\n    ),\n    \"about\":  (\n      <Typography>\n        <Title>\n          咕咕鸟的诞生\n        </Title>\n        <Paragraph>\n          咕咕鸟起源于我实习时期的一个小项目, 项目的目的是识别Twitter上动漫图片人物\n\n        </Paragraph>\n        <Paragraph>\n          为了识别, 分类图片. 我尝试在互联网上搜索动漫人物数据集, 但是当时并没有一个公开的数据集\n        </Paragraph>\n        <Paragraph>\n          于是我尝试在<Text code>Pixiv</Text>下载动漫人物二次创作作品. 咕咕鸟的诞生从这56位人物,10665张开始\n        </Paragraph>\n        <Title level={2}>\n          咕咕鸟模型\n        </Title>\n        <Paragraph>\n          咕咕鸟当前使用 <Text code> mobilenet_v2 </Text> 模型. 训练了261个EPOCH后验证集 TOP1 准确率到了85.236%\n          于是开始尝试线上使用.\n          我们期望后期咕咕鸟的识别率能有95%以上. 并且能够不断扩增人物数据集\n        </Paragraph>\n        <Title level={2} >\n          维护人员\n        </Title>\n        <Paragraph>\n          <ul>\n            <li>\n              前端: <a href=\"https://github.com/malusama\" target=\"_blank\">malusama</a>\n            </li>\n            <li>\n              后端: <a href=\"https://github.com/malusama\" target=\"_blank\">malusama</a>\n            </li>\n            <li>\n              咕咕鸟数据喂养: <a href=\"https://github.com/malusama\" target=\"_blank\">malusama</a>\n            </li>\n            <li>\n              深度学习模型: <a href=\"https://github.com/orgs/gugu-abyss/people/wuyiclover\" target=\"_blank\">wuyiclover</a>\n            </li>\n          </ul>\n        </Paragraph>\n      </Typography>\n    ),\n    \"figure\": (\n      <Row>\n        {figure()}\n      </Row>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Menu onClick={handleClick} selectedKeys={[current]} mode=\"horizontal\">\n        <Menu.Item key=\"index\" icon={<MailOutlined />}>\n          主页\n        </Menu.Item>\n        <Menu.Item key=\"about\">\n          About Me\n        </Menu.Item>\n        <Menu.Item key=\"figure\">\n          咕咕鸟识别谱\n        </Menu.Item>\n      </Menu>\n      {page[current]}\n    </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ReactGA from 'react-ga';\nimport * as serviceWorker from './serviceWorker';\n\nReactGA.initialize('UA-28923877-2');\nReactGA.pageview(window.location.pathname + window.location.search);\n\n\nconst Index = () => (\n    <Router>\n        <Switch>\n            <Route path='/' exact component={App} />\n            {/*<Route path='/export' exact component={Export} />*/}\n            {/*<Route path='/setcookie' exact component={SetCookie} />*/}\n        </Switch>\n</Router>\n);\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}